// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: protobuf.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FulcrumClient is the client API for Fulcrum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FulcrumClient interface {
	AddBase(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	DeleteBase(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	RenameBase(ctx context.Context, in *RenameBaseRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	UpdateBase(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	GetSectorInfo(ctx context.Context, in *SectorRequest, opts ...grpc.CallOption) (*SectorResponse, error)
}

type fulcrumClient struct {
	cc grpc.ClientConnInterface
}

func NewFulcrumClient(cc grpc.ClientConnInterface) FulcrumClient {
	return &fulcrumClient{cc}
}

func (c *fulcrumClient) AddBase(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/grpc.Fulcrum/AddBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) DeleteBase(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/grpc.Fulcrum/DeleteBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) RenameBase(ctx context.Context, in *RenameBaseRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/grpc.Fulcrum/RenameBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) UpdateBase(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/grpc.Fulcrum/UpdateBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) GetSectorInfo(ctx context.Context, in *SectorRequest, opts ...grpc.CallOption) (*SectorResponse, error) {
	out := new(SectorResponse)
	err := c.cc.Invoke(ctx, "/grpc.Fulcrum/GetSectorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FulcrumServer is the server API for Fulcrum service.
// All implementations must embed UnimplementedFulcrumServer
// for forward compatibility
type FulcrumServer interface {
	AddBase(context.Context, *BaseRequest) (*BaseResponse, error)
	DeleteBase(context.Context, *BaseRequest) (*BaseResponse, error)
	RenameBase(context.Context, *RenameBaseRequest) (*BaseResponse, error)
	UpdateBase(context.Context, *BaseRequest) (*BaseResponse, error)
	GetSectorInfo(context.Context, *SectorRequest) (*SectorResponse, error)
	mustEmbedUnimplementedFulcrumServer()
}

// UnimplementedFulcrumServer must be embedded to have forward compatible implementations.
type UnimplementedFulcrumServer struct {
}

func (UnimplementedFulcrumServer) AddBase(context.Context, *BaseRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBase not implemented")
}
func (UnimplementedFulcrumServer) DeleteBase(context.Context, *BaseRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBase not implemented")
}
func (UnimplementedFulcrumServer) RenameBase(context.Context, *RenameBaseRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameBase not implemented")
}
func (UnimplementedFulcrumServer) UpdateBase(context.Context, *BaseRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBase not implemented")
}
func (UnimplementedFulcrumServer) GetSectorInfo(context.Context, *SectorRequest) (*SectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSectorInfo not implemented")
}
func (UnimplementedFulcrumServer) mustEmbedUnimplementedFulcrumServer() {}

// UnsafeFulcrumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FulcrumServer will
// result in compilation errors.
type UnsafeFulcrumServer interface {
	mustEmbedUnimplementedFulcrumServer()
}

func RegisterFulcrumServer(s grpc.ServiceRegistrar, srv FulcrumServer) {
	s.RegisterService(&Fulcrum_ServiceDesc, srv)
}

func _Fulcrum_AddBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).AddBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Fulcrum/AddBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).AddBase(ctx, req.(*BaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_DeleteBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).DeleteBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Fulcrum/DeleteBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).DeleteBase(ctx, req.(*BaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_RenameBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).RenameBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Fulcrum/RenameBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).RenameBase(ctx, req.(*RenameBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_UpdateBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).UpdateBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Fulcrum/UpdateBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).UpdateBase(ctx, req.(*BaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_GetSectorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).GetSectorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Fulcrum/GetSectorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).GetSectorInfo(ctx, req.(*SectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fulcrum_ServiceDesc is the grpc.ServiceDesc for Fulcrum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fulcrum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Fulcrum",
	HandlerType: (*FulcrumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBase",
			Handler:    _Fulcrum_AddBase_Handler,
		},
		{
			MethodName: "DeleteBase",
			Handler:    _Fulcrum_DeleteBase_Handler,
		},
		{
			MethodName: "RenameBase",
			Handler:    _Fulcrum_RenameBase_Handler,
		},
		{
			MethodName: "UpdateBase",
			Handler:    _Fulcrum_UpdateBase_Handler,
		},
		{
			MethodName: "GetSectorInfo",
			Handler:    _Fulcrum_GetSectorInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf.proto",
}
